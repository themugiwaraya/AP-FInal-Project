import logging
import os
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from aiohttp import ClientSession
import chromadb
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from PyPDF2 import PdfReader
from langchain.embeddings import OllamaEmbeddings
import numpy as np
from bs4 import BeautifulSoup
import aiohttp

TOKEN = "7418707631:AAGT9UGwC5lofsIMCj-ba8W4zjtoOr_ZdGk"  
OLLAMA_URL = "http://localhost:11434/api/generate"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot setup
app = Application.builder().token(TOKEN).build()

user_selected_docs = {}
chat_history = {}

def get_main_menu():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å URL")], 
            [KeyboardButton("üìÇ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")],
            [KeyboardButton("üìú –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã")]  
        ],
        resize_keyboard=True
    )

async def handle_my_documents(update: Update, context):
    if not documents:
        await update.message.reply_text("üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return
    
    keyboard = []
    for doc_id, title in documents.items():
        keyboard.append([InlineKeyboardButton(title, callback_data=f"open_{doc_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìú –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:", reply_markup=reply_markup)
   
def get_chat_history(user_id, doc_id):
    """Get chat history for specific user and document"""
    return chat_history.get(user_id, {}).get(doc_id, [])   

def add_to_chat_history(user_id, doc_id, query, response):
    """Add a new entry to chat history for specific user and document"""
    if user_id not in chat_history:
        chat_history[user_id] = {}
    if doc_id not in chat_history[user_id]:
        chat_history[user_id][doc_id] = []
    chat_history[user_id][doc_id].append((query, response))
    
async def generate_ollama_response(context, query):
    """Generate a response using Ollama"""
    prompt = f"""Analyze the provided context and answer the question.  
    If there is not enough information, state that explicitly.

Context:
{context}

Question: {query}

Answer:"""
    
    logger.info("Sending request to Ollama")

    async with ClientSession() as session:
        async with session.post(OLLAMA_URL, json={
            "model": "llama3.2",
            "prompt": prompt,
            "stream": False
        }) as response:
            if response.status == 200:
                result = await response.json()
                return result.get('response', 'Failed to generate a response')
            else:
                error_text = await response.text()
                logger.error(f"Ollama error: {error_text}")
                return "An error occurred while generating the response"

chroma_client = chromadb.PersistentClient(path="chroma_db")
try:
    chroma_client.delete_collection("documentsv2")
except:
    pass
collection = chroma_client.create_collection(name="documentsv2", metadata={"hnsw:space": "cosine"})

embedder = OllamaEmbeddings(model="llama3.2", base_url="http://localhost:11434")

documents = {}

def extract_text(file_path):
    if file_path.endswith(".pdf"):
        reader = PdfReader(file_path)
        return "\n".join(page.extract_text() for page in reader.pages if page.extract_text())
    elif file_path.endswith(".txt"):
        with open(file_path, "r", encoding="utf-8") as f:
            return f.read()
    return ""

def create_wordcloud(text, file_path):
    wordcloud = WordCloud(font_path="arial.ttf", width=800, height=400, background_color='white').generate(text)
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis("off")
    plt.savefig(file_path)
    plt.close()

def save_document_with_embedding(doc_id, text):
    try:
        embedding = embedder.embed_query(text)
        collection.add(ids=[doc_id], documents=[text], embeddings=[embedding])
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {doc_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ ChromaDB")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise
def create_doc_kb(doc_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –û—Ç–∫—Ä—ã—Ç—å", callback_data=f"open_{doc_id}")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{doc_id}")]
    ])

def create_chat_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", callback_data="exit_chat")]
    ])

async def start(update: Update, context):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç!  –Ø ‚Äî –≤–∞—à –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ URL-—Å—Å—ã–ª–∫–∞–º–∏.\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "1. üìé –î–æ–±–∞–≤–∏—Ç—å URL ‚Äî –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã.\n"
        "2. üìÇ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç, –∏ —è –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç, —Å–æ–∑–¥–∞–º –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã.\n"
        "3. üìú –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –ø–æ–∫–∞–∂—É –≤–∞–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø–æ–∑–≤–æ–ª—é –∏—Ö –æ—Ç–∫—Ä—ã—Ç—å, —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º–∏.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º!"
    )
    
    await update.message.reply_text(welcome_text, reply_markup=get_main_menu())


async def fetch_url_content(url: str) -> str:
    """Extracts text from webpage URL"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, "html.parser")
                    text = soup.get_text(separator=" ", strip=True)
                    return text
                else:
                    return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å URL: {response.status}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL: {str(e)}"

async def handle_document(update: Update, context):
    document = update.message.document
    file_id = document.file_id
    file_name = document.file_name
    doc_id = str(uuid.uuid4())
    file_path = f"uploads/{doc_id}_{file_name}"

    new_file = await context.bot.get_file(file_id)
    await new_file.download_to_drive(file_path)
    text = extract_text(file_path)
    if text:
        try:
            save_document_with_embedding(doc_id, text)
            wordcloud_path = f"uploads/{doc_id}_wordcloud.png"
            create_wordcloud(text, wordcloud_path)
            documents[doc_id] = file_name

            with open(wordcloud_path, "rb") as photo:
                await update.message.reply_photo(photo, caption=f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_name}", reply_markup=create_doc_kb(doc_id))
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

async def handle_url(update: Update, context):
    url = update.message.text
    doc_id = str(uuid.uuid4())

    logger.info(f"Processing URL: {url}")

    try:
        text = await fetch_url_content(url)
        if text:
            save_document_with_embedding(doc_id, text)
            documents[doc_id] = url
            
            wordcloud_path = f"uploads/{doc_id}_wordcloud.png"
            create_wordcloud(text, wordcloud_path)

            with open(wordcloud_path, "rb") as photo:
                await update.message.reply_photo(photo, caption=f"–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {url}", reply_markup=create_doc_kb(doc_id))
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}")

async def callback_handler(update: Update, context):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = query.from_user.id

    if data == "exit_chat":
        user_selected_docs.pop(user_id, None)
        await query.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞", reply_markup=get_main_menu())
        return

    if data.startswith("delete_"):
        doc_id = data.split("_")[1]
        if doc_id in documents:
            # Delete document and its chat history
            wordcloud_path = f"uploads/{doc_id}_wordcloud.png"
            if os.path.exists(wordcloud_path):
                os.remove(wordcloud_path)
            documents.pop(doc_id)
            # Remove chat history for this document for all users
            for user_histories in chat_history.values():
                user_histories.pop(doc_id, None)
            await query.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω", reply_markup=get_main_menu())
        return

    doc_id = data.split("_")[1]
    if data.startswith("open_"):
        if doc_id not in documents:
            await query.message.reply_text("–û—à–∏–±–∫–∞: –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return
        
        user_selected_docs[user_id] = doc_id
        wordcloud_path = f"uploads/{doc_id}_wordcloud.png"

        # Get history specific to this user and document
        doc_history = get_chat_history(user_id, doc_id)
        history_text = "\n\n".join([f"‚ùì {q}\nüí¨ {a}" for q, a in doc_history]) or "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞."
        
        if os.path.exists(wordcloud_path):
            with open(wordcloud_path, "rb") as photo:
                await query.message.reply_photo(
                    photo,
                    caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {documents[doc_id]}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å:\n\nüìú –ò—Å—Ç–æ—Ä–∏—è:\n{history_text}",
                    reply_markup=create_chat_kb()
                )
        else:
            await query.message.reply_text(f"–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.\n\nüìú –ò—Å—Ç–æ—Ä–∏—è:\n{history_text}")

async def handle_query(update: Update, context):
    user_id = update.message.from_user.id
    doc_id = user_selected_docs.get(user_id)

    if not doc_id or doc_id not in documents:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç")
        return

    query_text = update.message.text
    try:
        query_embedding = embedder.embed_query(query_text)
        results = collection.query(query_embeddings=[query_embedding], n_results=3)

        if results and results['documents']:
            context = "\n".join(results['documents'][0])
            processing_msg = await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

            response = await generate_ollama_response(context, query_text)
            await processing_msg.delete()
            await update.message.reply_text(response)

            add_to_chat_history(user_id, doc_id, query_text, response)

        else:
            await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        
async def handle_text(update: Update, context):
    text = update.message.text
    if text == "üìú –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã":
        await handle_my_documents(update, context)
    elif text.startswith(('http://', 'https://')):
        await handle_url(update, context)
    else:
        await handle_query(update, context)

def main():
    os.makedirs("uploads", exist_ok=True)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT, handle_text))  # Modified this line
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.run_polling()

if __name__ == "__main__":
    main()